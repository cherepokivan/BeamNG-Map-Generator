// src/App.tsx
import React, { useState, useEffect } from 'react';
import { invoke } from '@tauri-apps/api/tauri';
import { listen } from '@tauri-apps/api/event';
import { open } from '@tauri-apps/api/dialog';
import { MapContainer, TileLayer, Rectangle, useMapEvents } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import './App.css';

interface BoundingBox {
  min_lat: number;
  min_lng: number;
  max_lat: number;
  max_lng: number;
}

interface GenerationProgress {
  stage: string;
  progress: number;
}

function MapSelector({ onBoundsChange }: { onBoundsChange: (bounds: BoundingBox) => void }) {
  const [selectionStart, setSelectionStart] = useState<[number, number] | null>(null);
  const [selectionEnd, setSelectionEnd] = useState<[number, number] | null>(null);

  const MapEvents = () => {
    useMapEvents({
      click: (e) => {
        if (!selectionStart) {
          setSelectionStart([e.latlng.lat, e.latlng.lng]);
        } else if (!selectionEnd) {
          setSelectionEnd([e.latlng.lat, e.latlng.lng]);
          
          const bbox: BoundingBox = {
            min_lat: Math.min(selectionStart[0], e.latlng.lat),
            min_lng: Math.min(selectionStart[1], e.latlng.lng),
            max_lat: Math.max(selectionStart[0], e.latlng.lat),
            max_lng: Math.max(selectionStart[1], e.latlng.lng),
          };
          onBoundsChange(bbox);
        }
      },
    });
    return null;
  };

  const resetSelection = () => {
    setSelectionStart(null);
    setSelectionEnd(null);
  };

  return (
    <div className="map-container">
      <MapContainer
        center={[51.505, -0.09]}
        zoom={13}
        style={{ height: '500px', width: '100%' }}
      >
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
        <MapEvents />
        
        {selectionStart && selectionEnd && (
          <Rectangle
            bounds={[selectionStart, selectionEnd]}
            pathOptions={{ color: 'blue', fillOpacity: 0.2 }}
          />
        )}
      </MapContainer>
      
      <div className="selection-info">
        {selectionStart && !selectionEnd && (
          <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –æ–±–ª–∞—Å—Ç–∏</p>
        )}
        {selectionStart && selectionEnd && (
          <button onClick={resetSelection}>–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä</button>
        )}
      </div>
    </div>
  );
}

function App() {
  const [bbox, setBbox] = useState<BoundingBox | null>(null);
  const [outputPath, setOutputPath] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState<GenerationProgress>({
    stage: '',
    progress: 0,
  });
  const [result, setResult] = useState<string>('');

  useEffect(() => {
    const unlisten = listen<GenerationProgress>('generation-progress', (event) => {
      setProgress(event.payload);
    });

    return () => {
      unlisten.then((fn) => fn());
    };
  }, []);

  const selectOutputPath = async () => {
    const selected = await open({
      directory: true,
      multiple: false,
      title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã',
    });

    if (selected && typeof selected === 'string') {
      setOutputPath(selected);
    }
  };

  const generateTerrain = async () => {
    if (!bbox || !outputPath) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    setIsGenerating(true);
    setResult('');

    try {
      const response = await invoke<string>('generate_terrain', {
        bbox,
        outputPath,
      });
      setResult(response);
    } catch (error) {
      setResult(`–û—à–∏–±–∫–∞: ${error}`);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>üöó BeamNG Terrain Generator</h1>
        <p>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç BeamNG.drive –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π</p>
      </header>

      <main className="App-main">
        <section className="map-section">
          <h2>1. –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</h2>
          <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–≤–∞–∂–¥—ã –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å</p>
          <MapSelector onBoundsChange={setBbox} />
          
          {bbox && (
            <div className="bbox-info">
              <h3>–í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å:</h3>
              <p>–®–∏—Ä–æ—Ç–∞: {bbox.min_lat.toFixed(6)} - {bbox.max_lat.toFixed(6)}</p>
              <p>–î–æ–ª–≥–æ—Ç–∞: {bbox.min_lng.toFixed(6)} - {bbox.max_lng.toFixed(6)}</p>
            </div>
          )}
        </section>

        <section className="output-section">
          <h2>2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</h2>
          <button onClick={selectOutputPath} className="select-button">
            üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É
          </button>
          {outputPath && <p className="path-display">–ü—É—Ç—å: {outputPath}</p>}
        </section>

        <section className="generate-section">
          <h2>3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã</h2>
          <button
            onClick={generateTerrain}
            disabled={!bbox || !outputPath || isGenerating}
            className="generate-button"
          >
            {isGenerating ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üöÄ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É'}
          </button>

          {isGenerating && (
            <div className="progress-container">
              <div className="progress-bar">
                <div
                  className="progress-fill"
                  style={{ width: `${progress.progress}%` }}
                />
              </div>
              <p className="progress-text">
                {progress.stage} - {progress.progress.toFixed(0)}%
              </p>
            </div>
          )}

          {result && (
            <div className={`result ${result.includes('–û—à–∏–±–∫–∞') ? 'error' : 'success'}`}>
              {result}
              {!result.includes('–û—à–∏–±–∫–∞') && (
                <div className="mod-info">
                  <h3>‚úÖ –ú–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</h3>
                  <p>üì¶ –§–∞–π–ª –º–æ–¥–∞: <code>generated_map.zip</code></p>
                  <h4>–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:</h4>
                  <ol>
                    <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ <code>generated_map.zip</code> –≤ –ø–∞–ø–∫—É –º–æ–¥–æ–≤ BeamNG</li>
                    <li>Windows: <code>%USERPROFILE%\AppData\Local\BeamNG.drive\0.32\mods\</code></li>
                    <li>Linux: <code>~/.local/share/BeamNG.drive/0.32/mods/</code></li>
                    <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ BeamNG.drive</li>
                    <li>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –º–æ–¥ –≤ Repository</li>
                    <li>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å "Generated Map" –≤ –º–µ–Ω—é —É—Ä–æ–≤–Ω–µ–π</li>
                  </ol>
                </div>
              )}
            </div>
          )}
        </section>

        <section className="info-section">
          <h2>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
          <ul>
            <li>‚úÖ Terrain –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ AWS Terrain Tiles</li>
            <li>‚úÖ –û–±—ä–µ–∫—Ç—ã (–∑–¥–∞–Ω–∏—è, –¥–µ—Ä–µ–≤—å—è, –æ—Å—Ç–∞–Ω–æ–≤–∫–∏) –∏–∑ OpenStreetMap</li>
            <li>‚úÖ –ü–æ–ª–Ω–∞—è –¥–æ—Ä–æ–∂–Ω–∞—è —Å–µ—Ç—å —Å road_nodes</li>
            <li>‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç BeamNG.drive</li>
            <li>‚úÖ –°–æ–∑–¥–∞—ë—Ç—Å—è –≥–æ—Ç–æ–≤—ã–π ZIP –º–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏</li>
            <li>‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π</li>
          </ul>
          
          <div className="mod-structure">
            <h3>üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–∞:</h3>
            <pre>
generated_map.zip
‚îú‚îÄ‚îÄ info.json (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–∞)
‚îú‚îÄ‚îÄ levels/
‚îÇ   ‚îî‚îÄ‚îÄ generated_map/
‚îÇ       ‚îú‚îÄ‚îÄ main.level.json (–∫–æ–Ω—Ñ–∏–≥ —É—Ä–æ–≤–Ω—è)
‚îÇ       ‚îú‚îÄ‚îÄ items.level.json (–æ–±—ä–µ–∫—Ç—ã)
‚îÇ       ‚îú‚îÄ‚îÄ road_nodes.json (–¥–æ—Ä–æ–∂–Ω–∞—è —Å–µ—Ç—å)
‚îÇ       ‚îú‚îÄ‚îÄ decalRoad.json (–¥–æ—Ä–æ–≥–∏ BeamNG)
‚îÇ       ‚îú‚îÄ‚îÄ preview.jpg (–ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç—ã)
‚îÇ       ‚îî‚îÄ‚îÄ art/
‚îÇ           ‚îî‚îÄ‚îÄ terrains/
‚îÇ               ‚îú‚îÄ‚îÄ terrain.png (heightmap)
‚îÇ               ‚îî‚îÄ‚îÄ terrain.ter.json (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            </pre>
          </div>
        </section>
      </main>

      <footer className="App-footer">
        <p>Made with ‚ù§Ô∏è using Rust + Tauri</p>
      </footer>
    </div>
  );
}

export default App;